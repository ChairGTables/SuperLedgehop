<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grenade_sonii</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friendly = 0;
absorbed = 0;

category = "spread";

image_angle = direction;

//Set health for enemy
hp = 20;

//set animation speed
image_speed = 0.5;

//You must define the hurt sprite as a string
hurtSprite = "spr_grenade_sonii";

//Do not touch this
sS = sprite_index;
hS = asset_get_index(hurtSprite);

//Define the knockback and hitstun
bulletKnockback = 5;
shineKnockback = 7;
hitstunTime = 13;

//Define the beat that sets the alarm events to occur
shootBeat = global.halfSec;    // whole note
//moveBeat = global.wholeSec; // half note

//Use these to shoot x amount of times before the enemy shoots again
shotCount = 0;
shotsBeforeRest = 0;
shootRestTime = 150;
action = 1;

counter = 0;

//Do not touch these
upmomentum = 0;
rightmomentum = 0;
leftmomentum = 0;
downmomentum = 0;

//Begin the alarms based on the beats
//alarm[0] = shootBeat;
shootTimer = shootBeat;
//alarm[1] = moveBeat;
//moveTimer = moveBeat;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////////////////////////
// Core-functionalities
// Do not touch these
// Scroll all the way down for changeable features
/////////////////////////

//script_execute(scr_enemycorestep);

////////////////////////////
//Add additional step features here
////////////////////////////

//Spin animation for spinning enemies (comment this out if non-spinner)
image_angle += 7.5;


shootTimer -= delta_time / 1000000;
//moveTimer -= delta_time / 1000000;

script_execute(scr_resyncenemies_david);

if (shootTimer &lt;= 0)
{
    // ======== SHOOTING ====================
    //Reset timer
    shootTimer = shootBeat;
    
    //Perform shooting
    if (action == 1)
    {
        //This code segment shoots a huge surrounding circle
        audio_play_sound (snd_enemybullet, 10, false); 
        anglePerShot = 10;
        for (i = 0; i &lt; 360 / anglePerShot; i++)
        {
            var shot = instance_create(x, y, obj_spread_sonii);
            if (instance_exists(shot))
            {
                shot.direction = i * anglePerShot;
                shot.speed = 6;
            }
        }
        
        
    }
    
    // Beat indicator
    var beatIndicator = instance_create(x, y, obj_beatindicator_david);
    beatIndicator.image_speed = shootBeat;
    
    hp = -1;

}
// ======================================================
/*
if (moveTimer &lt;= 0)
{
    // ++++++++++++++ MOVING ++++++++++++++++++++++++++++
    //Always set the timer again so it loops
    moveTimer = moveBeat;
    
    //Action is checked on the step state to see if enemy is hurt or enemy is offscreen
    if(action == 1)
    {
        //Touch these to modify movement
        followspeed = 7;
        minimumspeed = 5;
        maximumspeed = 10;
        
            move_towards_point(obj_chizuru.x, obj_chizuru.y, followspeed);
    }
}*/

//++++++++++++++++++++++++++++++++++++++++++++++++++


/////////////////////////////
//Death
/////////////////////////
if( hp &lt; 1 )
{
    instance_create(x, y, obj_explosion);
    instance_destroy(self);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
