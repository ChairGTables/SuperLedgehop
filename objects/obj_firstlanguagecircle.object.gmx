<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_firstlanguagecircle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!file_exists(working_directory + "soulOfC.txt"))
{
    fileId = file_text_open_write(working_directory + "soulOfC.txt");
    if (fileId = -1)
    {
        show_message("lol the save file got zuccd");
        exit;
    }
    
    file_text_write_real(fileId, 0); //level
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0); //language
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0); //cutscenes
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0.75); //music
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0.45); //sfx
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0.70); //voice
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0); //misc1
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0); //misc2
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0); //misc3
    file_text_writeln(fileId);
    file_text_write_real(fileId, 0); //misc4
    file_text_writeln(fileId);
    file_text_write_string(fileId, "This is Chizuru's soul. Be careful, as it is fragile.");
    file_text_writeln(fileId);
    file_text_write_string(fileId, "0110100001110100011101000111000000111010001011110010111101110111011101110111011100101110011011000110000101101101011001010110010001101001011011010110010101101110011100110110100101101111011011100010111001101101011011110110010100101111011001100111001001101001011001010110111001100100");


    file_text_close(fileId);
}

fileId = file_text_open_read(working_directory + "soulOfC.txt");
if (fileId = -1)
{
    show_message("lol the save file got zuccd");
    exit;
}

global.highestLevel = file_text_read_real(fileId);
file_text_readln(fileId);


global.language = file_text_read_real(fileId);
file_text_readln(fileId);

global.disableCutscenes = file_text_read_real(fileId);
file_text_readln(fileId);

global.titleSelection = 0;
global.titleState = 1;



//////////////////////////
//Sound emitters
////////////////////////////
// Volumes
global.masterVolume  = 1;
global.musicVolume   = file_text_read_real(fileId);
file_text_readln(fileId);
global.effectsVolume = file_text_read_real(fileId);
file_text_readln(fileId);
global.voiceVolume   = file_text_read_real(fileId);
file_text_readln(fileId);
global.volumeHold = 1;

// Sound emitters
global.musicEmitter   = audio_emitter_create();
global.effectsEmitter = audio_emitter_create();
global.voiceEmitter   = audio_emitter_create();

// Set volumes of emitters
audio_master_gain (global.masterVolume);
audio_emitter_gain(global.musicEmitter,   global.musicVolume);
audio_emitter_gain(global.effectsEmitter, global.effectsVolume);
audio_emitter_gain(global.voiceEmitter, global.voiceVolume);

go = 0;
joy_z = false;
joy_up = false;
joy_down = false;
disabled = 0;
dpad = 0;

instance_create(x, y, obj_whitefadein);


global.misc1 = file_text_read_real(fileId);
file_text_readln(fileId);
global.misc2 = file_text_read_real(fileId);
file_text_readln(fileId);
global.misc3 = file_text_read_real(fileId);
file_text_readln(fileId);
global.misc4 = file_text_read_real(fileId);
file_text_readln(fileId);


file_text_close(fileId);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(scr_autosave);

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gamepad_axis_value(0, gp_axislh) &lt; 0.1 &amp;&amp; gamepad_axis_value(0, gp_axislh) &gt; -0.1 &amp;&amp; gamepad_axis_value(0, gp_axislv) &lt; 0.1 &amp;&amp; gamepad_axis_value(0, gp_axislv) &gt; -0.1 &amp;&amp; dpad = 0)
{
    go = 0;
}

if gamepad_button_check_released(0, gp_padu)
    {
        if (joy_up = true)
        {
            joy_up = false;
            if (joy_up = false &amp;&amp; joy_down = false)
            {
                dpad = 0;
            }
            
        }
    }

if gamepad_button_check(0, gp_padu)
    {
        if (joy_up = false)
        {
            joy_up = true;
            dpad = 1;
            global.chizurumovey = gamepad_axis_value(0, -1);
            global.isGamepad = true;
            
            if (global.language == 0)
            {
                global.language = 3;
            }
            else
            {
                global.language -= 1;
            }
        }
    }
    
if gamepad_button_check_released(0, gp_padd)
    {
        if (joy_down = true)
        {
            joy_down = false;
            if (joy_up = false &amp;&amp; joy_down = false)
            {
                dpad = 0;
            }
            global.chizurumovey = gamepad_axis_value(0, 0);
        }
    }

if gamepad_button_check(0, gp_padd)
    {
        if (joy_down = false)
        {
            joy_down = true;
            dpad = 1;
            global.chizurumovey = gamepad_axis_value(0, 1);
            global.isGamepad = true;
            
            if (go == 0 )
            {
                go = 1;
                if (global.language == 3)
                {
                    global.language = 0;
                }
                else
                {
                    global.language += 1;
                }
            }
        }
    }

if gamepad_axis_value(0, gp_axislv) &gt; 0.8
{
    global.chizurumovey = gamepad_axis_value(0, gp_axislh);
    global.isGamepad = true;
            
    if (go == 0 )
    {
        go = 1;
        if (global.language == 3)
        {
            global.language = 0;
        }
        else
        {
            global.language += 1;
        }
    }
}

if gamepad_axis_value(0, gp_axislv) &lt; -0.8
{
    global.chizurumovey = gamepad_axis_value(0, gp_axislh);
    global.isGamepad = true;
            
    if (go == 0 )
    {
        go = 1;
        if (global.language == 0)
        {
            global.language = 3;
        }
        else
        {
            global.language -= 1;
        }
    }
}



if gamepad_button_check_released(0, gp_face1)
    {
        if (joy_z = true)
        {
            joy_z = false;
            
        }
    }    
    
if gamepad_button_check_pressed(0, gp_face1)
    {
        if (joy_z = false)
        {
            joy_z = true;
            if (disabled == 0)
            {
                disabled = 1;
                instance_create(x, y, obj_ldoutline);
                instance_create(x, y, obj_whitefadeout);
                alarm[0] = 30;
            }
        }
    }

switch (global.language)
{
    case 3:
        if (instance_exists(obj_chamoru))
        {
            x = obj_chamoru.x - 230;
            y = obj_chamoru.y;
        }
        break;    

    case 2:
        if (instance_exists(obj_japanese))
        {
            x = obj_japanese.x - 230;
            y = obj_japanese.y;
        }
        break;

    case 1:
        if (instance_exists(obj_espanol))
        {
            x = obj_espanol.x - 230;
            y = obj_espanol.y;
        }
        break;

    default:
        if (instance_exists(obj_english))
        {
            x = obj_english.x - 230;
            y = obj_english.y;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
