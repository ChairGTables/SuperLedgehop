<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yuutorock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bounce = 0;
rotationSpeed = 2;
astral = 0;
alarm[0] = 15;
alarm[1] = 2;
shootAngle = 0;
previousX = x;
previousY = y;
attacking = 0;
testString = 0;
hitDetected = false;
isShooting = false;
isFiring = false;
shootCount = 0;
bulletAngle = 0;
detector = instance_create(x, y, obj_rockdetection);
detector.rockMaster = self;
bypassShooting = false;
flameAngle = 0;
flameLength = 0;
flame[0] = noone;
flame[1] = noone;
flame[2] = noone;
flame[3] = noone;
isIcing = false;

if (global.misc1 == 0)
{
    if (instance_exists(obj_yuutoboss))
    {
        speed = 7;
        direction = point_direction(x, y, obj_yuutoboss.x, obj_yuutoboss.y);
    }
    
    if (instance_exists(obj_yuutoassist))
    {
        speed = 7;
        direction = point_direction(x, y, obj_yuutoassist.x, obj_yuutoassist.y);
    }
}
else
{
    if (instance_exists(obj_chizuru))
    {
        speed = 7;
        direction = point_direction(x, y, obj_chizuru.x, obj_chizuru.y);
    }
}

//Wave
t = 0;
increment = 12; //degrees -- freq = 1 oscillation per second (1Hz) in a 30 fps room
amplitude = 10; //pixels of peak oscillation
 
//clone the y-position (or use x instead if you're doing horizontal oscillation)
yy = 0;
waveDisplay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>astral = 0;
audio_play_sound_on (global.effectsEmitter, snd_ricebullet, false, 10); 
for (i = 0; i &lt; 360; i += 20)
{
    shot = instance_create(x, y, obj_chizuruspreadbullet);
    shot.direction = i;
    shot.speed = 7;
}

if (instance_exists(obj_yuutoassist) &amp;&amp; astral == 0)
{
    speed = 10;
    direction = point_direction(x, y, obj_yuutoassist.x, obj_yuutoassist.y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isIcing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isFiring)
{
    image_xscale = 1;
    image_yscale = 1;
    speed = 0;
    
    myAngle = direction + 45;
    for (i = 0; i &lt; 4; i++)
    {
        var fire1 = instance_create(x, y, obj_chizuruflame);
        fire1.speed = random_range(7, 20);
        fire1.direction = myAngle;
        fire1.steroids = 1;
        myAngle += random_range(0, 360);
    }
    
    myAngle = direction + 225;
    for (i = 0; i &lt; 4; i++)
    {
        var fire1 = instance_create(x, y, obj_chizuruflame);
        fire1.speed = random_range(7, 20);
        fire1.direction = myAngle;
        fire1.steroids = 1;
        myAngle += random_range(0, 360);
    }
    
    shootCount += 1;
    
    if (shootCount &lt; 7)
    {
        alarm[3] = 3;
    }
    else
    {
        shootCount = 0;
        isFiring = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//shoot round bullets
if (isShooting)
{
    image_xscale = 1;
    image_yscale = 1;
    
    audio_play_sound_on (global.effectsEmitter, snd_ricebullet, false, 10); 
    bulletSpeedAdder = 0;
    for(i = 0; i &lt; 3; i++)
    {
        spreadShot = instance_create(x, y, obj_chizuruspreadbullet);
        spreadShot.direction = bulletAngle;
        spreadShot.speed = 12 + bulletSpeedAdder;
        spreadShot.timed = 1;
                            
        spreadShot.image_xscale = 2;
        spreadShot.image_yscale = 2;
        
        bulletSpeedAdder += 3;
    }
    
    bulletAngle += 10;
    
    shootCount += 1;
    
    if (shootCount &lt; 4)
    {
        alarm[2] = 3;
    }
    else
    {
        shootCount = 0;
        isShooting = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shadow = instance_create(x, y, obj_yuutosillhoute);
shadow.direction = direction + 180;
shadow.speed = 1;
alarm[1] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_playerrockstop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>previousX = x;
previousY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!attacking)
{
    image_angle += rotationSpeed;
    
    t = (t + increment) mod 360;
    shift = amplitude * dsin(t);
     
    //clone the movement from the object's speed and direction
    yy = 0;
    waveDisplay = yy + shift; //vertical wave motion
}
else
{
    if (hitDetected)
    {
        hitDetected = false;
        scr_playerrockstop();
        if (hitbox != noone)
        {
            if (instance_exists(hitbox))
            {
                instance_destroy(hitbox);
            }
        }
    }
    else
    {
        hitbox = instance_create(x, y, obj_chizurubasicbullet);
        hitbox.alarm[0] = 1;
        hitbox.summoner = self;
        hitbox.image_xscale = 5;
        hitbox.image_yscale = 5;
        hitbox.speed = speed;
        hitbox.direction = direction;
        hitbox.timed = 1;
        hitbox.visible = 0;
        hitbox.image_alpha = 0;
    
        limitCheck = 7;
    }
    
    
    
}

if (isShooting || isFiring)
{
    speed = 0;
    image_xscale += 0.2;
    image_yscale += 0.2;
}

if (isIcing)
{
    speed = 0;
}

if (0 == 0)
{
    flameAngle += 0.2;
    if (flameLength &lt; 80)
    {
        flameLength += 10;
    }
    

    for (i = 0; i &lt; 4; i++)
    {
        if (flame[i] != noone &amp;&amp; instance_exists(flame[i]))
        {
            fireAngle = flameAngle + ((pi/2) * i);
            flame[i].x = x + (cos(fireAngle) * flameLength);
            flame[i].y = y + ((sin(fireAngle) * flameLength)/2);
        }
        
    } 
    
}


if (x &gt; view_xview + 960 || x &lt; view_xview + 0 || y &gt; view_yview + 540 || y &lt; view_yview + 0)
{
    if (attacking)
    {
        bypassShooting = true;
        scr_playerrockstop();
    }
}

/*

if (rotationSpeed &gt; 2)
{
    rotationSpeed += 1;
    speed += 0.5;
    direction = image_angle;
    
    shot = instance_create(x, y, obj_spread_sonii);
    shot.speed = 7;
    shot.direction = shotAngle;
    
    shot2 = instance_create(x, y, obj_spread_sonii);
    shot2.speed = 7;
    shot2.direction = shotAngle + 180;
    
    shotAngle += 3;    
    if (rotationSpeed &gt; 60)
    {
        rotationSpeed = 2;
        speed = 15;
    }
}
else
{
    shotAngle = image_angle;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (attacking)
{
    if (!other.soft)
    {
        bypassShooting = true;
        scr_playerrockstop();
    }
}
/*
if (bounce &gt; 0)
{
    if (bounce &lt; 5)
    {
        bounce += 1;
        speed = 30;
        if (instance_exists(obj_chizuru))
        {
            direction = point_direction(x, y, obj_chizuru.x, obj_chizuru.y);
        }
        anglePerShot = 20;
        for (i = 0; i &lt; 360 / anglePerShot; i++)
        {
            shot = instance_create(x, y, obj_spread_sonii);
            shot.direction = i * anglePerShot;
            shot.speed = 7;
        }
    }
    else
    {
        bounce = 0;
        speed = 20;
        if (instance_exists(obj_yuutoboss))
        {
            direction = point_direction(x, y, obj_yuutoboss.x, obj_yuutoboss.y);
        }
        alarm[0] = 5;
    }
}

if (astral == 1)
{
    x = previousX;
    y = previousY;
    astral = 0;
    alarm[7] = -1;
    audio_play_sound_on (global.effectsEmitter, snd_ricebullet, false, 10); 
    for (i = 0; i &lt; 360; i += 20)
    {
        shot = instance_create(x, y, obj_chizuruspreadbullet);
        shot.direction = i;
        shot.speed = 7;
    }
    
    
    if (instance_exists(obj_yuutoassist) &amp;&amp; astral == 0)
    {
        speed = 10;
        direction = point_direction(x, y, obj_yuutoassist.x, obj_yuutoassist.y);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y + waveDisplay, image_xscale, image_yscale, image_angle, c_white, image_alpha);
//draw_text(x, y + 20, testString);
//draw_text(x, y + 40, alarm[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
