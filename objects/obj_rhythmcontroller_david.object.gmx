<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get current position of the track
currentPos = audio_sound_get_track_position(global.musicrm1);

// Calculate current tempo position
global.currentWholeSec   =  global.wholeSec -
    (((currentPos * 100) % (global.bpmToSec * 100))     / 100);
global.currentHalfSec    =  global.halfSec -
    (((currentPos * 100) % (global.bpmToSec * 100 / 2)) / 100);
global.currentQuarterSec =  global.quarterSec -
    (((currentPos * 100) % (global.bpmToSec * 100 / 4)) / 100);

// Resync every 30 seconds
alarm[0] = 30 * room_speed;

// Set resync toggle on
global.resyncing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get current position of the track
currentPos = audio_sound_get_track_position(global.musicrm1);

// Calculate current tempo position
global.currentWholeSec   =  global.wholeSec   -
    (((currentPos * 100) % (global.bpmToSec * 100))     / 100);
global.currentHalfSec    =  global.halfSec    -
    (((currentPos * 100) % (global.bpmToSec * 100 / 2)) / 100);
global.currentQuarterSec =  global.quarterSec -
    (((currentPos * 100) % (global.bpmToSec * 100 / 4)) / 100);

// Restart timer
alarm[0] = 30 * room_speed;

// Set resync toggle on
global.resyncing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Turn resync toggle off when not being used
if (alarm[0] &gt; 0)
{
    global.resyncing = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
