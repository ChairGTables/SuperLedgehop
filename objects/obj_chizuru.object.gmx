<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chizurustandd</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.chizurumovex = 0;
global.chizurumovey = 0;

previousX = 0;
previousY = 0;

safeX = 0;
safeY = 0;

mySpeed = 7;
analogBoundary = 0.1;
aimBoundary = 0.01;
isMoving = 1;
isAiming = 1;
lookDirection = 2;
knockbackLook = 2;

image_speed = 0.3;

upmomentum = 0;
rightmomentum = 0;
leftmomentum = 0;
downmomentum = 0;


action = 1;
waveshine = 0;
spinning = 0;

spinAngle[0] = 0;
spinAngle[1] = 90;
spinAngle[2] = 180;
spinAngle[3] = 270;

spinFinish = 0;

gamepadCheck = global.isGamepad;

global.chizuruShootBeat = global.quarterSec;
global.chizuruShootTimer = global.chizuruShootBeat;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (spinFinish &gt; 15)
{
    obj_camera_chair.intensity = 10;
    angleDetermine = 0;
    global.specialsuccess = 1;
    for (j = 0; j &lt; 36; j++)
    {
        var bullet = instance_create(x, y, obj_chizuruspreadbullet);
        bullet.speed = 30;
        bullet.direction = angleDetermine;
                        
        bullet.image_xscale = 4;
        bullet.image_yscale = 4;
        
        //bullet.hspeed += hspeed;
        //bullet.vspeed += vspeed;
        
        angleDetermine += 10;
    }
    
    instance_create(x, y, obj_circleeraser);
    
    audio_stop_sound(snd_basicbullet);
    
    audio_play_sound_on (global.effectsEmitter, snd_waveblast, false, 10);
    if (random_range(0, 100) &gt; 50)
    {
        audio_play_sound_on (global.effectsEmitter, snd_chizurueatthis, false, 10);
    }
    else
    {
        audio_play_sound_on (global.effectsEmitter, snd_chizurutakethis, false, 10);
    }
    
}
else
{
        if (global.specialattempts == 1 &amp;&amp; global.specialsuccess == 0)
        {
            instance_create(x, y, obj_mpnotice);
        }
        if (global.specialattempts &lt;= 1)
        {
            global.specialattempts += 1;
        }
}

spinning = 0;
action = 1;
hspeed = 0;
vspeed = 0;
spinFinish = 0;



if(lookDirection == 1)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustanddr;
    }
    
    if(lookDirection == 2)
    {
        sprite_index = spr_chizurustandd;
    }
    
    if(lookDirection == 3)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustanddr;
        
    }
    
    if (lookDirection == 4)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustandr;
        
    }
    
    if (lookDirection == 6)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandr;
        
    }
    
    if (lookDirection == 7)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustandur;
        
    }
    
    if (lookDirection == 8)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandu;
        
    }
    
    if (lookDirection == 9)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandur;
    }
    
    image_index = 0;
    image_speed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action = 1;
waveshine = 0;

    if(lookDirection == 1)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustanddr;
    }
    
    if(lookDirection == 2)
    {
        sprite_index = spr_chizurustandd;
    }
    
    if(lookDirection == 3)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustanddr;
        
    }
    
    if (lookDirection == 4)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustandr;
        
    }
    
    if (lookDirection == 6)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandr;
        
    }
    
    if (lookDirection == 7)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustandur;
        
    }
    
    if (lookDirection == 8)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandu;
        
    }
    
    if (lookDirection == 9)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandur;
    }
    
    image_index = 0;
    image_speed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_chizuruwavedash</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x -= (x - previousX)/3;
y -= (y - previousY)/3;
alarm[7] = 2;
//instance_create(x, y, obj_redcircle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Emergency softlock
if (place_meeting(x, y, obj_wall))
{
    x = safeX;
    y = safeY;
    alarm[7] = 5;
    //instance_create(x, y, obj_redcircle);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

//Fix if stuck in wall
if (!place_meeting(x, y, obj_wall))
{
    previousX = x;
    previousY = y;
    alarm[7] = 2;
}

//Second fix if stuck in wall
if (!place_meeting(x, y, obj_wall))
{
    safeX = x;
    safeY = y;
    alarm[6] = 15;
}


if (global.chizuruhp &lt; 1)
{
    global.invincibility = 1;
    global.isCutscene = true;
}

if (global.chizurushinecharge &gt; 5 &amp;&amp; global.shineget == 1 &amp;&amp; !instance_exists(obj_bonustheme))
{
    if (global.chizurushine &gt; 40)
    {
        instance_create(x, y, obj_smallcircle);
    }
}

//Invincibility check
if (global.invincibility &gt; 0)
{
    if (global.chizuruhp &lt; 1)
    {
        image_alpha = 0;
    }
    else
    {
        image_alpha = 0.4;
    }

}
else
{
    image_alpha = 1;
}

//Gamepad check
if (global.isGamepad == true &amp;&amp; gamepadCheck == false)
{
    controlboi = instance_create(0, 0, obj_controlscheme);
    controlboi.image_index = 1;
    gamepadCheck = true;
}
if (global.isGamepad == false &amp;&amp; gamepadCheck == true)
{
    controlboi = instance_create(0, 0, obj_controlscheme);
    controlboi.image_index = 0;
    gamepadCheck = false;
}

/////////////////////////
//Beat check
/////////////////////////
global.chizuruShootTimer -= delta_time / 1000000;
global.chizuruMoveTimer  -= delta_time / 1000000;

if (global.chizuruShootRest &gt; -1)
{
    global.chizuruShootRest  -= delta_time / 1000000;
}


if (global.resyncing)
{
    if (global.chizuruShootBeat == global.wholeSec)
    {
        global.chizuruShootTimer = global.currentWholeSec;
    } else if (global.chizuruShootBeat == global.halfSec)
    {
        global.chizuruShootTimer = global.currentHalfSec;
    } else if (global.chizuruShootBeat == global.quarterSec)
    {
        global.chizuruShootTimer = global.currentQuarterSec;
    }
}

if (global.chizuruShootTimer &lt;= 0)
{
    // ======== SHOOTING ====================
    //Reset timer
    global.chizuruShootTimer = global.chizuruShootBeat;
}
if (global.chizuruMoveTimer &lt;= 0)
{
    // ======== SHOOTING ====================
    //Reset timer
    global.chizuruMoveTimer = global.chizuruMoveBeat;
}


/////////////////////////
//Momentum Control
////////////////////////

//Set momentum to zero if they are small enough
if (upmomentum &lt; 0.5)
{
    upmomentum = 0;
}

if (upmomentum &gt; 0)
{
    upmomentum = upmomentum - 0.5;
}


if (leftmomentum &lt; 0.5)
{
    leftmomentum = 0;
}

if (leftmomentum &gt; 0)
{
    leftmomentum = leftmomentum - 0.5;
}


if (rightmomentum &lt; 0.5)
{
    rightmomentum = 0;
}

if (rightmomentum &gt; 0)
{
    rightmomentum = rightmomentum - 0.5;
}


if (downmomentum &lt; 0.5)
{
    downmomentum = 0;
}

if (downmomentum &gt; 0)
{
    downmomentum = downmomentum - 0.5;
}

if(global.isCutscene == false)
{
    if ((vspeed &lt; 1) &amp;&amp; (vspeed &gt; -1))
    {
        vspeed = 0;
    }
    
    if ((hspeed &lt; 1) &amp;&amp; (hspeed &gt; -1))
    {
        hspeed = 0;
    }
    
    if ((vspeed != 0) &amp;&amp; (vspeed &gt; 0))
    {
        vspeed = vspeed - 1;
    }
    
    if ((vspeed != 0) &amp;&amp; (vspeed &lt; 0))
    {
        vspeed = vspeed + 1;
    }
    
    if ((hspeed != 0) &amp;&amp; (hspeed &gt; 0))
    {
        hspeed = hspeed - 1;
    }
    
    if ((hspeed != 0) &amp;&amp; (hspeed &lt; 0))
    {
        hspeed = hspeed + 1;
    }
}


//Hspeed Vspeed Collisions
script_execute(scr_truespeedwallcheck);



//Move object based on its current momentum
if (!place_meeting(x - leftmomentum, y, obj_wall) &amp;&amp; !place_meeting(x - ( leftmomentum / 2), y, obj_wall) )
{
    x -= leftmomentum;
}
if (!place_meeting(x + rightmomentum, y, obj_wall) &amp;&amp; !place_meeting(x + ( rightmomentum / 2), y, obj_wall) )
{
    x += rightmomentum;
}
if (!place_meeting(x, y - upmomentum, obj_wall) &amp;&amp; !place_meeting(x, y - ( upmomentum / 2), obj_wall) )
{
    y -= upmomentum;
}
if (!place_meeting(x, y + downmomentum, obj_wall) &amp;&amp; !place_meeting(x, y + ( downmomentum / 2), obj_wall) )
{
    y += downmomentum;
}






/////////////////////////
//Wall Checks
////////////////////////
//script_execute(scr_speedwallcheck);

////////////////////////////////
//Spin Action
///////////////////////////////
if (spinning == 1 &amp;&amp; instance_exists(obj_gamepad) &amp;&amp; !instance_exists(obj_bonustheme))
{
    if (obj_gamepad.spinning == true &amp;&amp; global.chizurump &gt; 0)
    {
        spinFinish += 1;
        global.chizurump -= 5;
        angleIncrease = random_range(20, 50);
        for (i = 0; i &lt; 4; i++)
        {
            if (random_range(0, 100) &gt; 30)
            {
                audio_play_sound_on (global.effectsEmitter, snd_basicbullet, false, 10); 
                for (j = 0; j &lt; random_range(2,5); j++)
                {
                    var bullet = instance_create(x, y, obj_chizurubasicbullet);
                    bullet.speed = 15;
                    bullet.direction = spinAngle[i] + random_range(-5, 5);
                    bullet.hspeed += hspeed;
                    bullet.vspeed += vspeed;
                    
                    bullet.image_xscale = 2;
                    bullet.image_yscale = 2;
                    
                    bullet.vortex = 1;
                }
                
            }
            
            spinAngle[i] += angleIncrease;    
        } 
    }
}


///////////////////////////////
//Check if player can do action
//////////////////////////////
action = 1;
if (sprite_index == spr_chizuruhurtd)
{
    action = 0;
    spinning = 0;
}
if (waveshine == 1)
{
    action = 0;
}
if (spinning == 1)
{
    action = 0;
    
}
if (global.isCutscene == true)
{
    action = 0;
    global.chizurumovex = 0;
    global.chizurumovey = 0;
}


////////////////////////////////
//Player Controls
///////////////////////////////



if (action == 1)
{
    speedMultiplier = 1;
    
    if position_meeting(x, y, obj_icepath)
    {
        if (abs(hspeed) &lt; 30)
        {
            hspeed += global.chizurumovex * (mySpeed / 3);
        }
        if (abs(vspeed) &lt; 30)
        {
            vspeed += global.chizurumovey * (mySpeed / 3);
        }
        
    }
    script_execute(scr_truespeedwallcheck);
    
    //x movement
    if (global.chizurumovex &gt; analogBoundary || global.chizurumovex &lt; -analogBoundary)
    {
        if (!place_meeting(x + global.chizurumovex * mySpeed * speedMultiplier, y, obj_wall) &amp;&amp; !place_meeting(x  + ( (global.chizurumovex * mySpeed * speedMultiplier) / 2), y, obj_wall ) &amp;&amp; !place_meeting(x + hspeed + global.chizurumovex * mySpeed * speedMultiplier, y, obj_wall ) )
        {
            //if issues continue, add in the hspeed as another factor
        
            /*
            xWallCheck = 0;
            for (i = 0; i &lt; 16 + abs(hspeed); i++)
            {
                for (j = -12; j &lt; 12; j++)
                {
                    if (instance_position(x + i, y + j, obj_wall) &amp;&amp; global.chizurumovex &gt; 0)
                    {
                        xWallCheck = 1;    
                    }
                    if (instance_position(x - i, y + j, obj_wall) &amp;&amp; global.chizurumovex &lt; 0)
                    {
                        xWallCheck = 1;    
                    }
                }
                
            }*/
            /*
            if (xWallCheck == 0)
            {
                
            }
            */
            x+= global.chizurumovex * mySpeed * speedMultiplier;
        }
        /*
        x+= global.chizurumovex * mySpeed * speedMultiplier;
        
        if (global.chizurumovex != 0)
        {
            if (place_meeting(x + global.chizurumovex * mySpeed * speedMultiplier, y, obj_wall) )
            {
                if (global.chizurumovex &gt; 0)
                {
                    move_contact_all(0, global.chizurumovex * mySpeed * speedMultiplier);
                }
                if (global.chizurumovex &lt; 0)
                {
                    move_contact_all(180, -(global.chizurumovex * mySpeed * speedMultiplier) );
                }
            }
            else if (place_meeting(x + ((global.chizurumovex * mySpeed * speedMultiplier) / 2), y, obj_wall) )    
            {
                if (global.chizurumovex &gt; 0)
                {
                    move_contact_all(0, (global.chizurumovex * mySpeed * speedMultiplier) / 2);
                }
                if (global.chizurumovex &lt; 0)
                {
                    move_contact_all(180, -((global.chizurumovex * mySpeed * speedMultiplier) / 2) );
                }
            }
        }*/
    }
    //y movement
    if (global.chizurumovey &gt; analogBoundary || global.chizurumovey &lt; -analogBoundary)
    {
        if (!place_meeting(x, y + global.chizurumovey * mySpeed * speedMultiplier, obj_wall) &amp;&amp; !place_meeting(x, y + ( (global.chizurumovey * mySpeed * speedMultiplier) / 2), obj_wall ) &amp;&amp; !place_meeting(x, y + vspeed + global.chizurumovey * mySpeed * speedMultiplier, obj_wall) )
        {
            /*
            yWallCheck = 0;
            for (i = 0; i &lt; 20 + abs(vspeed); i++)
            {
                if (instance_position(x, y + i, obj_wall) &amp;&amp; global.chizurumovey &gt; 0)
                {
                    yWallCheck = 1;    
                }
                if (instance_position(x, y - i, obj_wall) &amp;&amp; global.chizurumovey &lt; 0)
                {
                    yWallCheck = 1;    
                }
            }
            if (yWallCheck == 0)
            {
                y += global.chizurumovey * mySpeed * speedMultiplier;
            }*/
            y += global.chizurumovey * mySpeed * speedMultiplier;
        }
        /*
        y+= global.chizurumovey * mySpeed * speedMultiplier;
        
        if (global.chizurumovey != 0)
        {
            if (place_meeting(x, y + global.chizurumovey * mySpeed * speedMultiplier, obj_wall) )
            {
                if (global.chizurumovey &gt; 0)
                {
                    move_contact_all(270, global.chizurumovey * mySpeed * speedMultiplier);
                }
                if (global.chizurumovey &lt; 0)
                {
                    move_contact_all(90, -(global.chizurumovey * mySpeed * speedMultiplier) );
                }
            }
            else if (place_meeting(x, y + ((global.chizurumovey * mySpeed * speedMultiplier) / 2), obj_wall) )    
            {
                if (global.chizurumovey &gt; 0)
                {
                    move_contact_all(270, (global.chizurumovey * mySpeed * speedMultiplier) / 2);
                }
                if (global.chizurumovey &lt; 0)
                {
                    move_contact_all(90, -((global.chizurumovey * mySpeed * speedMultiplier) / 2) );
                }
            }
        }
        */
    }
    
    //script_execute(scr_playerwallfix);
    
    if (abs(global.chizurumovex) &gt; analogBoundary || abs(global.chizurumovey) &gt; analogBoundary)
    {
        isMoving = 1;
    }
    else
    {
        isMoving = 0;
    }
    if (abs(global.chizuruaimx) &gt; aimBoundary || abs(global.chizuruaimy) &gt; aimBoundary)
    {
        isAiming = 1;
    }
    else
    {
        isAiming = 0;
    }
    if (instance_exists(obj_bonustheme))
    {
        isAiming = 0;
    }
    
    ////////////////////////////
    //aim look
    ////////////////////////////
    
    //right look
    if ((global.chizuruaimx &gt; analogBoundary || global.chizuruaimx &lt; -analogBoundary) &amp;&amp; abs(global.chizuruaimx) &gt; abs(global.chizuruaimy))
    {
        if (global.chizuruaimx &gt; 0)
        {
            lookDirection = 6;
        }
        else
        {
            lookDirection = 4;
        }
    }
    
    //down look
    if (global.chizuruaimy &gt; analogBoundary &amp;&amp; global.chizuruaimy &gt; abs(global.chizuruaimx))
    {
        lookDirection = 2;
    }
    
    //down right look
    if (abs(global.chizuruaimx) &gt; 0.4 &amp;&amp; global.chizuruaimy &gt; 0.4)
    {
        if (global.chizuruaimx &gt; 0)
        {
            lookDirection = 3;
        }
        else
        {
            lookDirection = 1;
        }
    }
    
    //up look
    if (global.chizuruaimy &lt; -analogBoundary &amp;&amp; abs(global.chizuruaimy) &gt; abs(global.chizuruaimx))
    {
        lookDirection = 8;
    }
    
    //up right look
    if (abs(global.chizuruaimx) &gt; 0.4 &amp;&amp; global.chizuruaimy &lt; -0.4)
    {
        if (global.chizuruaimx &gt; 0)
        {
            lookDirection = 9;
        }
        else
        {
            lookDirection = 7;
        }
    }
    
    
    
    ////////////////////////////
    //move look
    ////////////////////////////
    
    
    if (isAiming == 0)
    {
        //right look
        if ((global.chizurumovex &gt; analogBoundary || global.chizurumovex &lt; -analogBoundary) &amp;&amp; abs(global.chizurumovex) &gt; abs(global.chizurumovey))
        {
            if (global.chizurumovex &gt; 0)
            {
                lookDirection = 6;
            }
            else
            {
                lookDirection = 4;
            }
        }
        
        //down look
        if (global.chizurumovey &gt; analogBoundary &amp;&amp; global.chizurumovey &gt; global.chizurumovex)
        {
            lookDirection = 2;
        }
        
        //down right look
        if (abs(global.chizurumovex) &gt; 0.4 &amp;&amp; global.chizurumovey &gt; 0.4)
        {
            if (global.chizurumovex &gt; 0)
            {
                lookDirection = 3;
            }
            else
            {
                lookDirection = 1;
            }
        }
        
        //up look
        if (global.chizurumovey &lt; -analogBoundary &amp;&amp; abs(global.chizurumovey) &gt; abs(global.chizurumovex))
        {
            lookDirection = 8;
        }
        
        //up right look
        if (abs(global.chizurumovex) &gt; 0.4 &amp;&amp; global.chizurumovey &lt; -0.4)
        {
            if (global.chizurumovex &gt; 0)
            {
                lookDirection = 9;
            }
            else
            {
                lookDirection = 7;
            }
        }
    }
    
    
    ////////////////////
    //look set
    ///////////////////
    if(lookDirection == 1)
    {
        image_xscale = -1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkdr;
        }
        else
        {
            sprite_index = spr_chizurustanddr;
        }
    }
    
    if(lookDirection == 2)
    {
        image_xscale = 1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkd;
        }
        else
        {
            sprite_index = spr_chizurustandd;
        }
    }
    
    if(lookDirection == 3)
    {
        image_xscale = 1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkdr;
        }
        else
        {
            sprite_index = spr_chizurustanddr;
        }
    }
    
    if (lookDirection == 4)
    {
        image_xscale = -1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkr;
        }
        else
        {
            sprite_index = spr_chizurustandr;
        }
    }
    
    if (lookDirection == 6)
    {
        image_xscale = 1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkr;
        }
        else
        {
            sprite_index = spr_chizurustandr;
        }
    }
    
    if (lookDirection == 7)
    {
        image_xscale = -1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkur;
        }
        else
        {
            sprite_index = spr_chizurustandur;
        }
    }
    
    if (lookDirection == 8)
    {
        image_xscale = 1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalku;
        }
        else
        {
            sprite_index = spr_chizurustandu;
        }
    }
    
    if (lookDirection == 9)
    {
        image_xscale = 1;
        if (isMoving == 1)
        {
            sprite_index = spr_chizuruwalkur;
        }
        else
        {
            sprite_index = spr_chizurustandur;
        }
    }

}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index == spr_chizuruhurtd)
{
    lookDirection = knockbackLook;
    
    if(lookDirection == 1)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustanddr;
    }
    
    if(lookDirection == 2)
    {
        sprite_index = spr_chizurustandd;
    }
    
    if(lookDirection == 3)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustanddr;
        
    }
    
    if (lookDirection == 4)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustandr;
        
    }
    
    if (lookDirection == 6)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandr;
        
    }
    
    if (lookDirection == 7)
    {
        image_xscale = -1;
        sprite_index = spr_chizurustandur;
        
    }
    
    if (lookDirection == 8)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandu;
        
    }
    
    if (lookDirection == 9)
    {
        image_xscale = 1;
        sprite_index = spr_chizurustandur;
    }
    
    image_index = 0;
    image_speed = 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.chizurumovex</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.chizurumovey</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>200</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>(global.chizuruShootTimer &lt; 0.1 || global.chizuruShootTimer &gt; global.chizuruShootBeat - 0.1)</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>view_xview+20</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>view_yview+300</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
